<%
   var argumentStr = "";
   var params = params || null;
   argumentStr = commaSepParams(params);

   function commaSepParams(params){
    var argumentStr = "";
    var params = params || null;
    var firstParam = true;
    if(params && params.length > 0){
        params.forEach(function(param){
            var str = '';
            if (param.type.type === 'reflection') {
                str = getSignatureForFunction(param);
            } else {
                str = param.name  + ": " + param.type.name;
            }
            if(firstParam){
                    firstParam = false;
                    argumentStr = str;
            }else{
                    argumentStr = argumentStr + ", " + str;
            }
        });
    } 
    return argumentStr;
   } 

   function returnTypeStr(type){
    if(type.type === 'union'){
      var firstArg = true; 
      var retStr = '';
      type.types.forEach(function(typ){ 
        var str = '';  
        if(typ.name === 'Promise'){
            str = (typ.name + ' &lt;') + (typ.typeArguments ? typ.typeArguments[0].name + '&gt; ' : '');
        }else{
            str = typ.name;
        }
        if(firstArg){
            retStr = str;
            firstArg = false;
        }else{
            retStr = retStr + ' | ' + str;
        }
      });
      return retStr; 
    }else{
      return type.name ; 
    }
   }

   function getSignatureForFunction(param){
    var signatures = param.type.declaration.signatures;   
    if(signatures && signatures[0]){
        return param.name + ': ' + '(' + 
        commaSepParams(signatures[0].parameters) + ') => '
            +
        returnTypeStr(signatures[0].type);
    }else{
        return param.name;
    }

   }


%>
    <%-argumentStr%>
